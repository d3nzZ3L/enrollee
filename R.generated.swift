//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `default.realm`.
    static let defaultRealm = Rswift.FileResource(bundle: R.hostingBundle, name: "default", pathExtension: "realm")
    
    /// `bundle.url(forResource: "default", withExtension: "realm")`
    static func defaultRealm(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.defaultRealm
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 5 images.
  struct image {
    /// Image `calendar`.
    static let calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar")
    /// Image `news`.
    static let news = Rswift.ImageResource(bundle: R.hostingBundle, name: "news")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    /// Image `vpi`.
    static let vpi = Rswift.ImageResource(bundle: R.hostingBundle, name: "vpi")
    
    /// `UIImage(named: "calendar", bundle: ..., traitCollection: ...)`
    static func calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "news", bundle: ..., traitCollection: ...)`
    static func news(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.news, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vpi", bundle: ..., traitCollection: ...)`
    static func vpi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vpi, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `AddItemTableViewCell`.
    static let addItemTableViewCell = _R.nib._AddItemTableViewCell()
    /// Nib `NewsCollectionViewCell`.
    static let newsCollectionViewCell = _R.nib._NewsCollectionViewCell()
    
    /// `UINib(name: "AddItemTableViewCell", in: bundle)`
    static func addItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addItemTableViewCell)
    }
    
    /// `UINib(name: "NewsCollectionViewCell", in: bundle)`
    static func newsCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newsCollectionViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `addInfoItem`.
    static let addInfoItem: Rswift.ReuseIdentifier<AddItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "addInfoItem")
    /// Reuse identifier `menuItem`.
    static let menuItem: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "menuItem")
    /// Reuse identifier `newsCell`.
    static let newsCell: Rswift.ReuseIdentifier<NewsCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "newsCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 8 storyboards.
  struct storyboard {
    /// Storyboard `AddInfo`.
    static let addInfo = _R.storyboard.addInfo()
    /// Storyboard `ChangePasswordOrEmail`.
    static let changePasswordOrEmail = _R.storyboard.changePasswordOrEmail()
    /// Storyboard `EditInfo`.
    static let editInfo = _R.storyboard.editInfo()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Registration`.
    static let registration = _R.storyboard.registration()
    /// Storyboard `TabBar`.
    static let tabBar = _R.storyboard.tabBar()
    
    /// `UIStoryboard(name: "AddInfo", bundle: ...)`
    static func addInfo(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addInfo)
    }
    
    /// `UIStoryboard(name: "ChangePasswordOrEmail", bundle: ...)`
    static func changePasswordOrEmail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.changePasswordOrEmail)
    }
    
    /// `UIStoryboard(name: "EditInfo", bundle: ...)`
    static func editInfo(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.editInfo)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Registration", bundle: ...)`
    static func registration(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.registration)
    }
    
    /// `UIStoryboard(name: "TabBar", bundle: ...)`
    static func tabBar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tabBar)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _AddItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AddItemTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "addInfoItem"
      let name = "AddItemTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AddItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddItemTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NewsCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NewsCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "newsCell"
      let name = "NewsCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NewsCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewsCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try tabBar.validate()
    }
    
    struct addInfo: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = AddInfoViewController
      
      let bundle = R.hostingBundle
      let name = "AddInfo"
      
      fileprivate init() {}
    }
    
    struct changePasswordOrEmail: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = ChangePasswordOrEmailViewController
      
      let bundle = R.hostingBundle
      let name = "ChangePasswordOrEmail"
      
      fileprivate init() {}
    }
    
    struct editInfo: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = EditInfoViewController
      
      let bundle = R.hostingBundle
      let name = "EditInfo"
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "vpi") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'vpi' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = LoginViewController
      
      let bundle = R.hostingBundle
      let name = "Login"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    struct registration: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = RegistrationViewController
      
      let bundle = R.hostingBundle
      let name = "Registration"
      
      fileprivate init() {}
    }
    
    struct tabBar: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let name = "TabBar"
      let newsVC = StoryboardViewControllerResource<NewsViewController>(identifier: "newsVC")
      let tabBarVC = StoryboardViewControllerResource<UIKit.UITabBarController>(identifier: "TabBarVC")
      
      func newsVC(_: Void = ()) -> NewsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newsVC)
      }
      
      func tabBarVC(_: Void = ()) -> UIKit.UITabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabBarVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "news") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'news' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "settings") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'settings' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "calendar") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'calendar' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if _R.storyboard.tabBar().tabBarVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabBarVC' could not be loaded from storyboard 'TabBar' as 'UIKit.UITabBarController'.") }
        if _R.storyboard.tabBar().newsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newsVC' could not be loaded from storyboard 'TabBar' as 'NewsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
